int fibonacci(int n) {
    if (n == 0) {
        printf("0");
        return 0;
    } else if (n == 1) {
        printf("1");
        return 1;
    } else {
        return fibonacci(n‐1) + fibonacci(n‐2);
    }
}

fibonacci(3)을 호출하면 다음과 같은 일이 일어난다.

fibonacci(3)은 fibonacci(2)와 fibonacci(1) (첫 번째 호출)을 호출한다.
fibonacci(2)는 fibonacci(1) (두 번째 호출)과 fibonacci(0)을 호출한다.
두 번째 호출한 fibonacci(1)은 1을 출력하고 1을 리턴한다.
fibonacci(0)은 0을 출력하고, 0을 리턴한다.
fibonacci(2)는 fibonacci(1)과 fibonacci(0)의 결과를 얻고, 1을 리턴한다.
첫 번째 호출한 fibonacci(1)은 1을 출력하고, 1을 리턴한다.
fibonacci(3)은 fibonacci(2)와 fibonacci(1)의 결과를 얻고, 2를 리턴한다.

1은 2번 출력되고, 0은 1번 출력된다. N이 주어졌을 때,
 fibonacci(N)을 호출했을 때,
  0과 1이 각각 몇 번 출력되는지 구하는 프로그램을 작성하시오.

  첫째 줄에 테스트 케이스의 개수 T가 주어진다.
각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다. N은 40보다 작거나 같은 자연수 또는 0이다.


fibonacci(4)
 >> return fibonacci(4-1) + fibonacci(4-2)
    >> (fibonacci(3-1) + fibonacci(3-2)(여기서 1)) + (fibonacci(2-1)(여기서 1) fibonacci(2-2)(여기서 0))
        >> ((fibonacci(2-1)(여기서 1) + fibonacci(2-2)(여기서 0 ) + 1) + ( 1 + 0 ) 
            >> 1 = 3, 0 = 2

fibonacci(5)  
 >> return fibonacci(5-1) + fibonacci(5-2)
        >>  1 = 3, 0 = 2     1 = 2, 0 = 1
            >> 1 = 5, 0 = 3

fibonacci(6)
 >> return fibonacci(6-1) + fibonacci(6-2)
        >> 1 = 5, 0 = 3      1 = 3, 0 = 2
            >>  1 = 8, 0 = 5

fibonacci(7)
 >> return fibonacci(7-1) + fibonacci(7-2)
        >> 1 = 8, 0 = 5      1 = 5, 0 = 3
            >> 1 = 13, 0 = 8

fibonacci(8)
 >> return fibonacci(8-1) + fibonacci(8-2)
        >> 1 = 13, 0 = 8     1 = 8, 0 = 5
            >> 1 = 21, 0 = 13

fibonacci(T) ??
 >> return fibonacci(T-1) + fibonacci(T-2)
        >> fibonacci(T-2)의 1의 갯수 = 
